// source: bottle/inventory/v1/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bottle_inventory_v1_component_pb = require('../../../bottle/inventory/v1/component_pb.js');
goog.object.extend(proto, bottle_inventory_v1_component_pb);
var bottle_inventory_v1_part_pb = require('../../../bottle/inventory/v1/part_pb.js');
goog.object.extend(proto, bottle_inventory_v1_part_pb);
var bottle_inventory_v1_sku_pb = require('../../../bottle/inventory/v1/sku_pb.js');
goog.object.extend(proto, bottle_inventory_v1_sku_pb);
goog.exportSymbol('proto.bottle.inventory.v1.ComponentAvailabilityUpdated', null, global);
goog.exportSymbol('proto.bottle.inventory.v1.ComponentKitChanged', null, global);
goog.exportSymbol('proto.bottle.inventory.v1.PartCreated', null, global);
goog.exportSymbol('proto.bottle.inventory.v1.PartUpdated', null, global);
goog.exportSymbol('proto.bottle.inventory.v1.SkuDetailsUpdated', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.inventory.v1.ComponentAvailabilityUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.inventory.v1.ComponentAvailabilityUpdated.displayName = 'proto.bottle.inventory.v1.ComponentAvailabilityUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.inventory.v1.SkuDetailsUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.inventory.v1.SkuDetailsUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.inventory.v1.SkuDetailsUpdated.displayName = 'proto.bottle.inventory.v1.SkuDetailsUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.inventory.v1.PartCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.inventory.v1.PartCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.inventory.v1.PartCreated.displayName = 'proto.bottle.inventory.v1.PartCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.inventory.v1.PartUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.inventory.v1.PartUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.inventory.v1.PartUpdated.displayName = 'proto.bottle.inventory.v1.PartUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.inventory.v1.ComponentKitChanged = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.inventory.v1.ComponentKitChanged, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.inventory.v1.ComponentKitChanged.displayName = 'proto.bottle.inventory.v1.ComponentKitChanged';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.inventory.v1.ComponentAvailabilityUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.inventory.v1.ComponentAvailabilityUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    component: (f = msg.getComponent()) && bottle_inventory_v1_component_pb.Component.toObject(includeInstance, f),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.inventory.v1.ComponentAvailabilityUpdated}
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.inventory.v1.ComponentAvailabilityUpdated;
  return proto.bottle.inventory.v1.ComponentAvailabilityUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.inventory.v1.ComponentAvailabilityUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.inventory.v1.ComponentAvailabilityUpdated}
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_inventory_v1_component_pb.Component;
      reader.readMessage(value,bottle_inventory_v1_component_pb.Component.deserializeBinaryFromReader);
      msg.setComponent(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.inventory.v1.ComponentAvailabilityUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.inventory.v1.ComponentAvailabilityUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_inventory_v1_component_pb.Component.serializeBinaryToWriter
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Component component = 1;
 * @return {?proto.bottle.inventory.v1.Component}
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.prototype.getComponent = function() {
  return /** @type{?proto.bottle.inventory.v1.Component} */ (
    jspb.Message.getWrapperField(this, bottle_inventory_v1_component_pb.Component, 1));
};


/**
 * @param {?proto.bottle.inventory.v1.Component|undefined} value
 * @return {!proto.bottle.inventory.v1.ComponentAvailabilityUpdated} returns this
*/
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.prototype.setComponent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.inventory.v1.ComponentAvailabilityUpdated} returns this
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.prototype.clearComponent = function() {
  return this.setComponent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.prototype.hasComponent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 quantity = 2;
 * @return {number}
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bottle.inventory.v1.ComponentAvailabilityUpdated} returns this
 */
proto.bottle.inventory.v1.ComponentAvailabilityUpdated.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.inventory.v1.SkuDetailsUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.inventory.v1.SkuDetailsUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    sku: (f = msg.getSku()) && bottle_inventory_v1_sku_pb.Sku.toObject(includeInstance, f),
    availableQuantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    demandQuantity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    excessQuantity: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.inventory.v1.SkuDetailsUpdated}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.inventory.v1.SkuDetailsUpdated;
  return proto.bottle.inventory.v1.SkuDetailsUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.inventory.v1.SkuDetailsUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.inventory.v1.SkuDetailsUpdated}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_inventory_v1_sku_pb.Sku;
      reader.readMessage(value,bottle_inventory_v1_sku_pb.Sku.deserializeBinaryFromReader);
      msg.setSku(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailableQuantity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDemandQuantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExcessQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.inventory.v1.SkuDetailsUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.inventory.v1.SkuDetailsUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSku();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_inventory_v1_sku_pb.Sku.serializeBinaryToWriter
    );
  }
  f = message.getAvailableQuantity();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDemandQuantity();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getExcessQuantity();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional Sku sku = 1;
 * @return {?proto.bottle.inventory.v1.Sku}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.getSku = function() {
  return /** @type{?proto.bottle.inventory.v1.Sku} */ (
    jspb.Message.getWrapperField(this, bottle_inventory_v1_sku_pb.Sku, 1));
};


/**
 * @param {?proto.bottle.inventory.v1.Sku|undefined} value
 * @return {!proto.bottle.inventory.v1.SkuDetailsUpdated} returns this
*/
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.setSku = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.inventory.v1.SkuDetailsUpdated} returns this
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.clearSku = function() {
  return this.setSku(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.hasSku = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 available_quantity = 3;
 * @return {number}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.getAvailableQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bottle.inventory.v1.SkuDetailsUpdated} returns this
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.setAvailableQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 demand_quantity = 4;
 * @return {number}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.getDemandQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bottle.inventory.v1.SkuDetailsUpdated} returns this
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.setDemandQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 excess_quantity = 5;
 * @return {number}
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.getExcessQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bottle.inventory.v1.SkuDetailsUpdated} returns this
 */
proto.bottle.inventory.v1.SkuDetailsUpdated.prototype.setExcessQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.inventory.v1.PartCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.inventory.v1.PartCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.inventory.v1.PartCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.PartCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    part: (f = msg.getPart()) && bottle_inventory_v1_part_pb.Part.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.inventory.v1.PartCreated}
 */
proto.bottle.inventory.v1.PartCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.inventory.v1.PartCreated;
  return proto.bottle.inventory.v1.PartCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.inventory.v1.PartCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.inventory.v1.PartCreated}
 */
proto.bottle.inventory.v1.PartCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_inventory_v1_part_pb.Part;
      reader.readMessage(value,bottle_inventory_v1_part_pb.Part.deserializeBinaryFromReader);
      msg.setPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.inventory.v1.PartCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.inventory.v1.PartCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.inventory.v1.PartCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.PartCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_inventory_v1_part_pb.Part.serializeBinaryToWriter
    );
  }
};


/**
 * optional Part part = 1;
 * @return {?proto.bottle.inventory.v1.Part}
 */
proto.bottle.inventory.v1.PartCreated.prototype.getPart = function() {
  return /** @type{?proto.bottle.inventory.v1.Part} */ (
    jspb.Message.getWrapperField(this, bottle_inventory_v1_part_pb.Part, 1));
};


/**
 * @param {?proto.bottle.inventory.v1.Part|undefined} value
 * @return {!proto.bottle.inventory.v1.PartCreated} returns this
*/
proto.bottle.inventory.v1.PartCreated.prototype.setPart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.inventory.v1.PartCreated} returns this
 */
proto.bottle.inventory.v1.PartCreated.prototype.clearPart = function() {
  return this.setPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.inventory.v1.PartCreated.prototype.hasPart = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.inventory.v1.PartUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.inventory.v1.PartUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.inventory.v1.PartUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.PartUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    old: (f = msg.getOld()) && bottle_inventory_v1_part_pb.Part.toObject(includeInstance, f),
    pb_new: (f = msg.getNew()) && bottle_inventory_v1_part_pb.Part.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.inventory.v1.PartUpdated}
 */
proto.bottle.inventory.v1.PartUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.inventory.v1.PartUpdated;
  return proto.bottle.inventory.v1.PartUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.inventory.v1.PartUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.inventory.v1.PartUpdated}
 */
proto.bottle.inventory.v1.PartUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_inventory_v1_part_pb.Part;
      reader.readMessage(value,bottle_inventory_v1_part_pb.Part.deserializeBinaryFromReader);
      msg.setOld(value);
      break;
    case 2:
      var value = new bottle_inventory_v1_part_pb.Part;
      reader.readMessage(value,bottle_inventory_v1_part_pb.Part.deserializeBinaryFromReader);
      msg.setNew(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.inventory.v1.PartUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.inventory.v1.PartUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.inventory.v1.PartUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.PartUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOld();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_inventory_v1_part_pb.Part.serializeBinaryToWriter
    );
  }
  f = message.getNew();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bottle_inventory_v1_part_pb.Part.serializeBinaryToWriter
    );
  }
};


/**
 * optional Part old = 1;
 * @return {?proto.bottle.inventory.v1.Part}
 */
proto.bottle.inventory.v1.PartUpdated.prototype.getOld = function() {
  return /** @type{?proto.bottle.inventory.v1.Part} */ (
    jspb.Message.getWrapperField(this, bottle_inventory_v1_part_pb.Part, 1));
};


/**
 * @param {?proto.bottle.inventory.v1.Part|undefined} value
 * @return {!proto.bottle.inventory.v1.PartUpdated} returns this
*/
proto.bottle.inventory.v1.PartUpdated.prototype.setOld = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.inventory.v1.PartUpdated} returns this
 */
proto.bottle.inventory.v1.PartUpdated.prototype.clearOld = function() {
  return this.setOld(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.inventory.v1.PartUpdated.prototype.hasOld = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Part new = 2;
 * @return {?proto.bottle.inventory.v1.Part}
 */
proto.bottle.inventory.v1.PartUpdated.prototype.getNew = function() {
  return /** @type{?proto.bottle.inventory.v1.Part} */ (
    jspb.Message.getWrapperField(this, bottle_inventory_v1_part_pb.Part, 2));
};


/**
 * @param {?proto.bottle.inventory.v1.Part|undefined} value
 * @return {!proto.bottle.inventory.v1.PartUpdated} returns this
*/
proto.bottle.inventory.v1.PartUpdated.prototype.setNew = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.inventory.v1.PartUpdated} returns this
 */
proto.bottle.inventory.v1.PartUpdated.prototype.clearNew = function() {
  return this.setNew(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.inventory.v1.PartUpdated.prototype.hasNew = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.inventory.v1.ComponentKitChanged.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.inventory.v1.ComponentKitChanged.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.inventory.v1.ComponentKitChanged} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.ComponentKitChanged.toObject = function(includeInstance, msg) {
  var f, obj = {
    component: (f = msg.getComponent()) && bottle_inventory_v1_component_pb.Component.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.inventory.v1.ComponentKitChanged}
 */
proto.bottle.inventory.v1.ComponentKitChanged.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.inventory.v1.ComponentKitChanged;
  return proto.bottle.inventory.v1.ComponentKitChanged.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.inventory.v1.ComponentKitChanged} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.inventory.v1.ComponentKitChanged}
 */
proto.bottle.inventory.v1.ComponentKitChanged.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_inventory_v1_component_pb.Component;
      reader.readMessage(value,bottle_inventory_v1_component_pb.Component.deserializeBinaryFromReader);
      msg.setComponent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.inventory.v1.ComponentKitChanged.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.inventory.v1.ComponentKitChanged.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.inventory.v1.ComponentKitChanged} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.inventory.v1.ComponentKitChanged.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_inventory_v1_component_pb.Component.serializeBinaryToWriter
    );
  }
};


/**
 * optional Component component = 1;
 * @return {?proto.bottle.inventory.v1.Component}
 */
proto.bottle.inventory.v1.ComponentKitChanged.prototype.getComponent = function() {
  return /** @type{?proto.bottle.inventory.v1.Component} */ (
    jspb.Message.getWrapperField(this, bottle_inventory_v1_component_pb.Component, 1));
};


/**
 * @param {?proto.bottle.inventory.v1.Component|undefined} value
 * @return {!proto.bottle.inventory.v1.ComponentKitChanged} returns this
*/
proto.bottle.inventory.v1.ComponentKitChanged.prototype.setComponent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.inventory.v1.ComponentKitChanged} returns this
 */
proto.bottle.inventory.v1.ComponentKitChanged.prototype.clearComponent = function() {
  return this.setComponent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.inventory.v1.ComponentKitChanged.prototype.hasComponent = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.bottle.inventory.v1);
