// source: bottle/account/v1/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bottle_account_v1_organization_pb = require('../../../bottle/account/v1/organization_pb.js');
goog.object.extend(proto, bottle_account_v1_organization_pb);
var bottle_account_v1_user_pb = require('../../../bottle/account/v1/user_pb.js');
goog.object.extend(proto, bottle_account_v1_user_pb);
goog.exportSymbol('proto.bottle.account.v1.OrganizationCreated', null, global);
goog.exportSymbol('proto.bottle.account.v1.OrganizationJoined', null, global);
goog.exportSymbol('proto.bottle.account.v1.OrganizationLeft', null, global);
goog.exportSymbol('proto.bottle.account.v1.PasswordChanged', null, global);
goog.exportSymbol('proto.bottle.account.v1.PasswordReset', null, global);
goog.exportSymbol('proto.bottle.account.v1.TwoFactorRecoveryCodeUsed', null, global);
goog.exportSymbol('proto.bottle.account.v1.TwoFactorRequested', null, global);
goog.exportSymbol('proto.bottle.account.v1.TwoFactorRequested.TwoFactorMethod', null, global);
goog.exportSymbol('proto.bottle.account.v1.UserCreated', null, global);
goog.exportSymbol('proto.bottle.account.v1.UserDeleted', null, global);
goog.exportSymbol('proto.bottle.account.v1.UserUpdated', null, global);
goog.exportSymbol('proto.bottle.account.v1.Verification', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.UserCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.UserCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.UserCreated.displayName = 'proto.bottle.account.v1.UserCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.UserDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.UserDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.UserDeleted.displayName = 'proto.bottle.account.v1.UserDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.UserUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.UserUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.UserUpdated.displayName = 'proto.bottle.account.v1.UserUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.PasswordChanged = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.PasswordChanged, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.PasswordChanged.displayName = 'proto.bottle.account.v1.PasswordChanged';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.PasswordReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.PasswordReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.PasswordReset.displayName = 'proto.bottle.account.v1.PasswordReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.TwoFactorRequested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.TwoFactorRequested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.TwoFactorRequested.displayName = 'proto.bottle.account.v1.TwoFactorRequested';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.TwoFactorRecoveryCodeUsed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.displayName = 'proto.bottle.account.v1.TwoFactorRecoveryCodeUsed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.OrganizationCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.OrganizationCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.OrganizationCreated.displayName = 'proto.bottle.account.v1.OrganizationCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.OrganizationJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.OrganizationJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.OrganizationJoined.displayName = 'proto.bottle.account.v1.OrganizationJoined';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.OrganizationLeft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.OrganizationLeft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.OrganizationLeft.displayName = 'proto.bottle.account.v1.OrganizationLeft';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.account.v1.Verification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bottle.account.v1.Verification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.account.v1.Verification.displayName = 'proto.bottle.account.v1.Verification';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.UserCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.UserCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.UserCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.UserCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.UserCreated}
 */
proto.bottle.account.v1.UserCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.UserCreated;
  return proto.bottle.account.v1.UserCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.UserCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.UserCreated}
 */
proto.bottle.account.v1.UserCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.UserCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.UserCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.UserCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.UserCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.UserCreated.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 1));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.UserCreated} returns this
*/
proto.bottle.account.v1.UserCreated.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.UserCreated} returns this
 */
proto.bottle.account.v1.UserCreated.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.UserCreated.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.UserDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.UserDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.UserDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.UserDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.UserDeleted}
 */
proto.bottle.account.v1.UserDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.UserDeleted;
  return proto.bottle.account.v1.UserDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.UserDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.UserDeleted}
 */
proto.bottle.account.v1.UserDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.UserDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.UserDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.UserDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.UserDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.UserDeleted.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 1));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.UserDeleted} returns this
*/
proto.bottle.account.v1.UserDeleted.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.UserDeleted} returns this
 */
proto.bottle.account.v1.UserDeleted.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.UserDeleted.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.UserUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.UserUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.UserUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.UserUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.UserUpdated}
 */
proto.bottle.account.v1.UserUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.UserUpdated;
  return proto.bottle.account.v1.UserUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.UserUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.UserUpdated}
 */
proto.bottle.account.v1.UserUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.UserUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.UserUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.UserUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.UserUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.UserUpdated.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 1));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.UserUpdated} returns this
*/
proto.bottle.account.v1.UserUpdated.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.UserUpdated} returns this
 */
proto.bottle.account.v1.UserUpdated.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.UserUpdated.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.PasswordChanged.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.PasswordChanged.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.PasswordChanged} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.PasswordChanged.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.PasswordChanged}
 */
proto.bottle.account.v1.PasswordChanged.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.PasswordChanged;
  return proto.bottle.account.v1.PasswordChanged.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.PasswordChanged} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.PasswordChanged}
 */
proto.bottle.account.v1.PasswordChanged.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.PasswordChanged.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.PasswordChanged.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.PasswordChanged} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.PasswordChanged.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.PasswordChanged.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 1));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.PasswordChanged} returns this
*/
proto.bottle.account.v1.PasswordChanged.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.PasswordChanged} returns this
 */
proto.bottle.account.v1.PasswordChanged.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.PasswordChanged.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.PasswordReset.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.PasswordReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.PasswordReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.PasswordReset.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f),
    resetUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.PasswordReset}
 */
proto.bottle.account.v1.PasswordReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.PasswordReset;
  return proto.bottle.account.v1.PasswordReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.PasswordReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.PasswordReset}
 */
proto.bottle.account.v1.PasswordReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResetUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.PasswordReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.PasswordReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.PasswordReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.PasswordReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getResetUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.PasswordReset.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 1));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.PasswordReset} returns this
*/
proto.bottle.account.v1.PasswordReset.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.PasswordReset} returns this
 */
proto.bottle.account.v1.PasswordReset.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.PasswordReset.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string reset_url = 2;
 * @return {string}
 */
proto.bottle.account.v1.PasswordReset.prototype.getResetUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bottle.account.v1.PasswordReset} returns this
 */
proto.bottle.account.v1.PasswordReset.prototype.setResetUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.TwoFactorRequested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.TwoFactorRequested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.TwoFactorRequested.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.TwoFactorRequested}
 */
proto.bottle.account.v1.TwoFactorRequested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.TwoFactorRequested;
  return proto.bottle.account.v1.TwoFactorRequested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.TwoFactorRequested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.TwoFactorRequested}
 */
proto.bottle.account.v1.TwoFactorRequested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {!proto.bottle.account.v1.TwoFactorRequested.TwoFactorMethod} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.TwoFactorRequested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.TwoFactorRequested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.TwoFactorRequested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bottle.account.v1.TwoFactorRequested.TwoFactorMethod = {
  TWO_FACTOR_METHOD_UNSPECIFIED: 0,
  TWO_FACTOR_METHOD_SMS: 1,
  TWO_FACTOR_METHOD_VOICE: 2
};

/**
 * optional User user = 1;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 1));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.TwoFactorRequested} returns this
*/
proto.bottle.account.v1.TwoFactorRequested.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.TwoFactorRequested} returns this
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bottle.account.v1.TwoFactorRequested} returns this
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TwoFactorMethod method = 3;
 * @return {!proto.bottle.account.v1.TwoFactorRequested.TwoFactorMethod}
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.getMethod = function() {
  return /** @type {!proto.bottle.account.v1.TwoFactorRequested.TwoFactorMethod} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bottle.account.v1.TwoFactorRequested.TwoFactorMethod} value
 * @return {!proto.bottle.account.v1.TwoFactorRequested} returns this
 */
proto.bottle.account.v1.TwoFactorRequested.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f),
    recoveryCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    codesRemaining: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed}
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.TwoFactorRecoveryCodeUsed;
  return proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed}
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecoveryCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCodesRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getRecoveryCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCodesRemaining();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 1));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed} returns this
*/
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed} returns this
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string recovery_code = 2;
 * @return {string}
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.getRecoveryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed} returns this
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.setRecoveryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 codes_remaining = 3;
 * @return {number}
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.getCodesRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bottle.account.v1.TwoFactorRecoveryCodeUsed} returns this
 */
proto.bottle.account.v1.TwoFactorRecoveryCodeUsed.prototype.setCodesRemaining = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.OrganizationCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.OrganizationCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.OrganizationCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.OrganizationCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: (f = msg.getOrganization()) && bottle_account_v1_organization_pb.Organization.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.OrganizationCreated}
 */
proto.bottle.account.v1.OrganizationCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.OrganizationCreated;
  return proto.bottle.account.v1.OrganizationCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.OrganizationCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.OrganizationCreated}
 */
proto.bottle.account.v1.OrganizationCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_organization_pb.Organization;
      reader.readMessage(value,bottle_account_v1_organization_pb.Organization.deserializeBinaryFromReader);
      msg.setOrganization(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.OrganizationCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.OrganizationCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.OrganizationCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.OrganizationCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_organization_pb.Organization.serializeBinaryToWriter
    );
  }
};


/**
 * optional Organization organization = 1;
 * @return {?proto.bottle.account.v1.Organization}
 */
proto.bottle.account.v1.OrganizationCreated.prototype.getOrganization = function() {
  return /** @type{?proto.bottle.account.v1.Organization} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_organization_pb.Organization, 1));
};


/**
 * @param {?proto.bottle.account.v1.Organization|undefined} value
 * @return {!proto.bottle.account.v1.OrganizationCreated} returns this
*/
proto.bottle.account.v1.OrganizationCreated.prototype.setOrganization = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.OrganizationCreated} returns this
 */
proto.bottle.account.v1.OrganizationCreated.prototype.clearOrganization = function() {
  return this.setOrganization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.OrganizationCreated.prototype.hasOrganization = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.OrganizationJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.OrganizationJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.OrganizationJoined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.OrganizationJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: (f = msg.getOrganization()) && bottle_account_v1_organization_pb.Organization.toObject(includeInstance, f),
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.OrganizationJoined}
 */
proto.bottle.account.v1.OrganizationJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.OrganizationJoined;
  return proto.bottle.account.v1.OrganizationJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.OrganizationJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.OrganizationJoined}
 */
proto.bottle.account.v1.OrganizationJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_organization_pb.Organization;
      reader.readMessage(value,bottle_account_v1_organization_pb.Organization.deserializeBinaryFromReader);
      msg.setOrganization(value);
      break;
    case 2:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.OrganizationJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.OrganizationJoined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.OrganizationJoined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.OrganizationJoined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_organization_pb.Organization.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional Organization organization = 1;
 * @return {?proto.bottle.account.v1.Organization}
 */
proto.bottle.account.v1.OrganizationJoined.prototype.getOrganization = function() {
  return /** @type{?proto.bottle.account.v1.Organization} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_organization_pb.Organization, 1));
};


/**
 * @param {?proto.bottle.account.v1.Organization|undefined} value
 * @return {!proto.bottle.account.v1.OrganizationJoined} returns this
*/
proto.bottle.account.v1.OrganizationJoined.prototype.setOrganization = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.OrganizationJoined} returns this
 */
proto.bottle.account.v1.OrganizationJoined.prototype.clearOrganization = function() {
  return this.setOrganization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.OrganizationJoined.prototype.hasOrganization = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.OrganizationJoined.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 2));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.OrganizationJoined} returns this
*/
proto.bottle.account.v1.OrganizationJoined.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.OrganizationJoined} returns this
 */
proto.bottle.account.v1.OrganizationJoined.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.OrganizationJoined.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.OrganizationLeft.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.OrganizationLeft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.OrganizationLeft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.OrganizationLeft.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: (f = msg.getOrganization()) && bottle_account_v1_organization_pb.Organization.toObject(includeInstance, f),
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.OrganizationLeft}
 */
proto.bottle.account.v1.OrganizationLeft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.OrganizationLeft;
  return proto.bottle.account.v1.OrganizationLeft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.OrganizationLeft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.OrganizationLeft}
 */
proto.bottle.account.v1.OrganizationLeft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_organization_pb.Organization;
      reader.readMessage(value,bottle_account_v1_organization_pb.Organization.deserializeBinaryFromReader);
      msg.setOrganization(value);
      break;
    case 2:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.OrganizationLeft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.OrganizationLeft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.OrganizationLeft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.OrganizationLeft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_organization_pb.Organization.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional Organization organization = 1;
 * @return {?proto.bottle.account.v1.Organization}
 */
proto.bottle.account.v1.OrganizationLeft.prototype.getOrganization = function() {
  return /** @type{?proto.bottle.account.v1.Organization} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_organization_pb.Organization, 1));
};


/**
 * @param {?proto.bottle.account.v1.Organization|undefined} value
 * @return {!proto.bottle.account.v1.OrganizationLeft} returns this
*/
proto.bottle.account.v1.OrganizationLeft.prototype.setOrganization = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.OrganizationLeft} returns this
 */
proto.bottle.account.v1.OrganizationLeft.prototype.clearOrganization = function() {
  return this.setOrganization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.OrganizationLeft.prototype.hasOrganization = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.OrganizationLeft.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 2));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.OrganizationLeft} returns this
*/
proto.bottle.account.v1.OrganizationLeft.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.OrganizationLeft} returns this
 */
proto.bottle.account.v1.OrganizationLeft.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.OrganizationLeft.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.account.v1.Verification.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.account.v1.Verification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.account.v1.Verification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.Verification.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f),
    verificationUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.account.v1.Verification}
 */
proto.bottle.account.v1.Verification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.account.v1.Verification;
  return proto.bottle.account.v1.Verification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.account.v1.Verification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.account.v1.Verification}
 */
proto.bottle.account.v1.Verification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.account.v1.Verification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.account.v1.Verification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.account.v1.Verification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.account.v1.Verification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getVerificationUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.account.v1.Verification.prototype.getUser = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 1));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.account.v1.Verification} returns this
*/
proto.bottle.account.v1.Verification.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.account.v1.Verification} returns this
 */
proto.bottle.account.v1.Verification.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.account.v1.Verification.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string verification_url = 2;
 * @return {string}
 */
proto.bottle.account.v1.Verification.prototype.getVerificationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bottle.account.v1.Verification} returns this
 */
proto.bottle.account.v1.Verification.prototype.setVerificationUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.bottle.account.v1);
